name: Python 3.8, Node.js 16, Go 1.17, .NET 5.0, JDK 16, allure

on:
  push:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Test scenario tags'
        required: false
      network:
        type: choice
        description: 'Network (devnet, testnet, release-stand, night-stand, devnet-aws)'
        required: true
        default: 'night-stand'
        options:
          - devnet
          - testnet
          - release-stand
          - night-stand
          - devnet-aws
      # message:
      #   required: true
      # use-emoji:
      #   type: boolean
      #   description: Include ðŸŽ‰ðŸ¤£ emojis
      # environment:
      #   type: environment

jobs:
  python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/allure-prep
      - uses: ./.github/actions/switch-network
      - name: Install pipenv
        run: pipx install pipenv
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: 'pipenv'
          # cache-dependency-path: Pipfile.lock
      # - run: pipenv install
      - run: pipenv sync
      # - name: Install dependencies
      #   run: |
      #     # python -m pip install --upgrade pip
      #     # pip install pipenv
      #     pipenv sync
      #     # pip install -r requirements.txt
      - name: Lint with pylint
        run: |
          pipenv run pylint src
          pipenv run pylint features
      - name: Lint with flake8
        if: always()
        run: |
          pipenv run flake8 src
          pipenv run flake8 features
      - name: Test with behave
        if: always()
        run: |
          pwd
          # pipenv run pytest --alluredir=report/allure-results
          pipenv run behave -f allure_behave.formatter:AllureFormatter -o report/allure-results ./features --no-capture --no-capture-stderr
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: report/allure-results

  node-mocha:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/allure-prep
      - uses: ./.github/actions/switch-network
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        if: always()
        with:
          node-version: 16.x
          cache: 'npm'
          # cache-dependency-path: subdir/package-lock.json
      - run: npm ci
      - run: npm run build --if-present
      - name: Mocha tests
        timeout-minutes: 15
        run: |
          npm run test:mocha
      # - name: Moving test results
      #   run: |
      #     mv ./allure-results/ ./report/
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: report/allure-results

  node-cucumber:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/allure-prep
      - uses: ./.github/actions/switch-network
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        if: always()
        with:
          node-version: 16.x
          cache: 'npm'
          # cache-dependency-path: subdir/package-lock.json
      - run: npm ci
      - run: npm run build --if-present
      - run: npm run test:cucumber
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: report/allure-results

  node-nightwatch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/allure-prep
      - uses: ./.github/actions/switch-network
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        if: always()
        with:
          node-version: 16.x
          cache: 'npm'
          # cache-dependency-path: subdir/package-lock.json
      - run: npm ci
      - run: npm run build --if-present
      - run: npm run nw:ci
      # - run: find -name '*.test.js' | while read test ; do echo $test ; npm test $test ; done
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: report/allure-results

  golang:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/allure-prep
      - uses: ./.github/actions/switch-network
      - name: Set up Go
        uses: actions/setup-go@v2
        if: always()
        with:
          go-version: 1.17

      - name: Build
        if: always()
        run: |
          echo "go mod download"
          go mod download
          echo "go install"
          go install
          GCO_ENABLED=0
          go mod vendor
          go build -v ./...

      - name: Test
        if: always()
        run: |
          export ALLURE_RESULTS_PATH=/home/runner/work/neon-e2e/neon-e2e/report
          go test -v ./...
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: report/allure-results

  dotnet:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # needs:
    # - build
    # - dotnet-format
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/allure-prep
      - uses: ./.github/actions/switch-network
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        if: always()
        with:
          dotnet-version: 6.0.x
      - name: Print dotnet version
        if: always()
        run: dotnet --version
      - name: Restore dependencies
        if: always()
        run: dotnet restore
      # - name: dotnet - format check
      #   if: always()
      #   run: |
      #     run: dotnet tool update -g dotnet-format
      #     dotnet-format --check
      - name: Build
        if: always()
        run: dotnet build --no-restore
      - name: Test
        timeout-minutes: 15
        if: always()
        run: dotnet test --no-build --verbosity normal
      - name: Move report/*.json to report/allure-results/*.json
        if: always()
        run: mv ./report/*.json ./report/allure-results/
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: report/allure-results

  jdk:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/allure-prep
      - uses: ./.github/actions/switch-network
      - name: Set up JDK 16
        uses: actions/setup-java@v2
        if: always()
        with:
          java-version: '16'
          distribution: 'adopt'
          cache: 'gradle'
      - name: Run check style
        uses: nikitasavinov/checkstyle-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: 'github-pr-check'
          tool_name: 'testtool'
      - name: Gradle wrapper
        if: always()
        run: gradle wrapper --gradle-version 7.2
      - name: Print Gradle version
        if: always()
        run: gradle --version
      - name: Grant execute permission for gradlew
        if: always()
        run: chmod +x gradlew
      - name: Test
        timeout-minutes: 15
        if: always()
        run: ./gradlew build --warning-mode all
      - uses: ./.github/actions/allure-environment-data
        if: always()
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: report/allure-results

  environment-data:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - python
      - node-mocha
      - node-cucumber
      - node-nightwatch
      - golang
      - dotnet
      - jdk
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/allure-prep
      - uses: ./.github/actions/switch-network
      - uses: ./.github/actions/allure-environment-data
        if: always()
      - uses: ./.github/actions/allure-upload
        if: always()
        with:
          folder-name: report/allure-results

  allure:
    runs-on: ubuntu-latest
    if: always()
    needs: environment-data
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2

      - name: Get Allure history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # - name: Allure Report with history
      #   uses: simple-elf/allure-report-action@v1.5
      #   if: always()

      - name: Allure Report action from marketplace
        uses: neonlabsorg/allure-report-action@master
        if: always()
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 100

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history

  notification:
    runs-on: ubuntu-latest
    if: always()
    needs: allure
    env:
      NETWORK_NAME: 'night-stand-222'
    steps:
      - uses: actions/checkout@v2
      - name: Setting variables
        run: |
          echo "Tags: ${{ github.event.inputs.tags }}"
          echo "Network: ${{ github.event.inputs.network }}"
          if [ -z "${{ github.event.inputs.network }}" ]
          then
            NETWORK='night-stand'
          else
            NETWORK="${{ github.event.inputs.network }}"
          fi
          echo "NETWORK_NAME=$NETWORK" >> $GITHUB_ENV
          cat $GITHUB_ENV
          echo "NETWORK_NAME=$NETWORK_NAME"
          echo "{{ env.NETWORK_NAME }}=${{ env.NETWORK_NAME }}"
        shell: bash
      - name: Send a notification to Teams channel
        uses: neonlabsorg/teams-notification-action@1.2
        if: always()
        with:
          hookUrl: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          actionUrl: 'https://docs.neon-labs.org/neon-e2e/${{ github.run_number }}/'
          title: 'End-to-End Test Suite'
          networkName: ${{ env.NETWORK_NAME }}
